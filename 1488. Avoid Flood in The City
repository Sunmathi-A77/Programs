"""class Solution(object):
    def avoidFlood(self, rains):
        
        n = len(rains)
        res = [-1] * n
        full = set()
        
        for i in range(n):
            if rains[i] > 0:
                lake = rains[i]
                if lake in full:
                    return []
                full.add(lake)
                res[i] = -1
            else:
                if full:
                    lake_to_dry = full.pop()
                    res[i] = lake_to_dry
                else:
                    res[i] = 1
        
        return res"""


import heapq
from collections import defaultdict, deque

class Solution:
    def avoidFlood(self, rains):
        
        n = len(rains)
        res = [-1] * n
        nextRain = defaultdict(deque)

        for i, lake in enumerate(rains):
            if lake > 0:
                nextRain[lake].append(i)

        full = set()
        heap = []

        for i, lake in enumerate(rains):
            if lake > 0:
                nextRain[lake].popleft()

                if lake in full:
                    return []

                full.add(lake)
                if nextRain[lake]:
                    heapq.heappush(heap, (nextRain[lake][0], lake))
                res[i] = -1
            else:
                if heap:
                    _, dry_lake = heapq.heappop(heap)
                    full.remove(dry_lake)
                    res[i] = dry_lake
                else:
                    res[i] = 1

        return res   
