class Solution(object):
    def swimInWater(self, grid):
        
        n = len(grid)
        visited = [[False] * n for _ in range(n)]
        minHeap = [(grid[0][0], 0, 0)]  # (elevation, x, y)
        visited[0][0] = True
        directions = [(1,0), (-1,0), (0,1), (0,-1)]
        res = 0
        
        while minHeap:
            elev, x, y = heapq.heappop(minHeap)
            res = max(res, elev)
            
            if x == n-1 and y == n-1:
                return res
            
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                    visited[nx][ny] = True
                    heapq.heappush(minHeap, (grid[nx][ny], nx, ny))
        
