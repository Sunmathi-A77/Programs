/*int* findDiagonalOrder(int** mat, int matSize, int* matColSize, int* returnSize) {
    
    int m = matSize;
    int n = matColSize[0];
    int total = m * n;

    int* result = (int*)malloc(total * sizeof(int));
    *returnSize = total;

    int row = 0, col = 0, idx = 0;
    int up = 1;

    while (idx < total) 
    {
        result[idx++] = mat[row][col];

        if (up) 
        { 
            if (col == n - 1) 
            {
                row++;
                up = 0;
            } 
            else if (row == 0) 
            {
                col++;
                up = 0;
            } 
            else 
            {
                row--;
                col++;
            }
        } 
        else 
        {
            if (row == m - 1) 
            {
                col++;
                up = 1;
            } 
            else if (col == 0) 
            {
                row++;
                up = 1;
            } 
            else 
            {
                row++;
                col--;
            }
        }
    }

    return result;
}*/



int* findDiagonalOrder(int** mat, int matSize, int* matColSize, int* returnSize) {

    int m = matSize;
    int n = matColSize[0];
    int total = m * n;

    int* result = (int*)malloc(total * sizeof(int));
    *returnSize = total;

    int idx = 0;

    for (int d = 0; d < m + n - 1; d++) 
    {
        if (d % 2 == 0) 
        {
            int r = (d < m) ? d : m - 1;
            int c = d - r;

            while (r >= 0 && c < n) 
            {
                result[idx++] = mat[r][c];
                r--;
                c++;
            }
        } 
        else 
        {
            int c = (d < n) ? d : n - 1;
            int r = d - c;

            while (r < m && c >= 0) 
            {
                result[idx++] = mat[r][c];
                r++;
                c--;
            }
        }
    }
    
    return result;
}

